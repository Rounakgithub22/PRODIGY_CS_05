pip install scapy
from scapy.all import sniff, IP, TCP, UDP, ICMP
from scapy.layers.http import HTTPRequest  # If you want to capture HTTP requests

# Function to extract and display packet details
def process_packet(packet):
    # Check if the packet has an IP layer
    if IP in packet:
        ip_layer = packet[IP]
        
        # Extract IP addresses
        src_ip = ip_layer.src
        dst_ip = ip_layer.dst
        
        # Extract Protocol
        protocol = ip_layer.proto
        
        # Protocol number to human-readable form (e.g., TCP = 6, UDP = 17)
        if protocol == 6:
            protocol_name = "TCP"
        elif protocol == 17:
            protocol_name = "UDP"
        elif protocol == 1:
            protocol_name = "ICMP"
        else:
            protocol_name = str(protocol)

        print(f"Packet captured:")
        print(f"Source IP: {src_ip} -> Destination IP: {dst_ip}")
        print(f"Protocol: {protocol_name}")
        
        # If TCP/UDP, extract source and destination ports
        if TCP in packet or UDP in packet:
            sport = packet[TCP].sport if TCP in packet else packet[UDP].sport
            dport = packet[TCP].dport if TCP in packet else packet[UDP].dport
            print(f"Source Port: {sport} -> Destination Port: {dport}")
        
        # Display payload (only display non-empty payloads)
        if packet.haslayer(HTTPRequest):
            print(f"HTTP Request: {packet[HTTPRequest].Host}{packet[HTTPRequest].Path}")
        elif len(packet.payload) > 0:
            print(f"Payload: {bytes(packet.payload).decode(errors='ignore')}")
        print("-" * 80)


# Function to sniff packets
def start_sniffing(interface=None):
    print("Starting packet capture... Press Ctrl+C to stop.")
    try:
        sniff(iface=interface, prn=process_packet, store=False)
    except KeyboardInterrupt:
        print("Packet capture stopped.")


if __name__ == "__main__":
    interface = input("Enter the network interface (e.g., 'eth0' or 'wlan0'): ")
    start_sniffing(interface)
